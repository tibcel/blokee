<Activity mc:Ignorable="sap sap2010" x:Class="Process" this:Process.in_GoToCornerTable="[new system.data.DataTable]" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:sd1="clr-namespace:System.Drawing;assembly=System.Drawing" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Dictionary structure to store configuration data of the process (settings, constants and assets)." Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_Board" Type="InArgument(ui:UiElement)" />
    <x:Property sap2010:Annotation.AnnotationText="Transaction item to be processed." Name="in_RoundNumber" Type="InArgument(x:Int32)" />
    <x:Property Name="io_MyColor" Type="InOutArgument(x:String)" />
    <x:Property Name="io_AvailablePieces" Type="InOutArgument(scg:List(x:String))" />
    <x:Property Name="in_PlayTable" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_RectangleDictionary" Type="InArgument(scg:Dictionary(x:Int32, scg:List(sd1:Rectangle)))" />
    <x:Property Name="in_PiecesDT" Type="InArgument(sd:DataTable)" />
    <x:Property Name="in_PinLocationsDT" Type="InArgument(sd:DataTable)" />
    <x:Property Name="io_clickedPopup" Type="InOutArgument(x:Boolean)" />
    <x:Property Name="in_GoToCornerTable" Type="InArgument(sd:DataTable)" />
  </x:Members>
  <this:Process.in_PinLocationsDT>
    <InArgument x:TypeArguments="sd:DataTable" />
  </this:Process.in_PinLocationsDT>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>793.6,3639.2</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ProcessTransaction_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="37">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Vision.OCR</x:String>
      <x:String>UiPath.OCR.Contracts</x:String>
      <x:String>UiPath.OCR.Contracts.Activities</x:String>
      <x:String>UiPath.Core.Activities.OCR.Engines</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.Python</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="34">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.Vision.Core</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.Python</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Invoke major steps of the business process, which are usually implemented by multiple subworkflows.&#xA;&#xA;If a BusinessRuleException is thrown, the transaction is skipped. &#xA;If another kind of exception occurs, the current transaction can be retried. " DisplayName="Process" sap:VirtualizedContainerService.HintSize="615.2,3574.4" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <If Condition="[in_roundNumber = 1]" DisplayName="If first round" sap:VirtualizedContainerService.HintSize="573.6,302.4" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke WhoAmI workflow" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" Level="Info" LogEntry="OnlyInvocation" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\UICommon\WhoAmI.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <OutArgument x:TypeArguments="x:String" x:Key="out_myColor">
              <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="io_myColor" />
            </OutArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </If.Else>
    </If>
    <If Condition="[in_roundNumber &lt; 4]" DisplayName="If default moves" sap:VirtualizedContainerService.HintSize="573.6,878.4" sap2010:WorkflowViewState.IdRef="If_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Sequence opening strategy" sap:VirtualizedContainerService.HintSize="538.4,689.6" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Name="flip" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke SelectDefaultPieces workflow" sap:VirtualizedContainerService.HintSize="496.8,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\GameOpening\SelectDefaultPieces.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_roundNumber">
                <mva:VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="in_roundNumber" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_myColor">
                <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="io_myColor" />
              </InArgument>
              <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="io_AvailablePieces">
                <mva:VisualBasicReference x:TypeArguments="scg:List(x:String)" ExpressionText="io_AvailablePieces" />
              </InOutArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <Assign DisplayName="Assign flip" sap:VirtualizedContainerService.HintSize="496.8,60" sap2010:WorkflowViewState.IdRef="Assign_1">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[flip]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[in_Config("Flip").ToString]</InArgument>
            </Assign.Value>
          </Assign>
          <Switch x:TypeArguments="x:String" DisplayName="Switch opening based on color" Expression="[io_myColor]" sap:VirtualizedContainerService.HintSize="496.8,210.4" sap2010:WorkflowViewState.IdRef="Switch`1_1">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="blue" DisplayName="Invoke BlueOpen workflow" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\GameOpening\BlueOpen.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:Int32" x:Key="in_roundNumber">[in_roundNumber]</InArgument>
                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                <InArgument x:TypeArguments="ui:UiElement" x:Key="in_Board">[in_Board]</InArgument>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_PinLocationsDT">[in_PinLocationsDT]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="red" DisplayName="Invoke RedOpen workflow" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\GameOpening\RedOpen.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:Int32" x:Key="in_roundNumber">[in_roundNumber]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_flip" />
                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                <InArgument x:TypeArguments="ui:UiElement" x:Key="in_Board">[in_Board]</InArgument>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_PinLocations">[in_PinLocationsDT]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="green" DisplayName="Invoke GreenOpen workflow" sap:VirtualizedContainerService.HintSize="334.4,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\GameOpening\GreenOpen.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:Int32" x:Key="in_roundNumber">[in_roundNumber]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_flip">[flip]</InArgument>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_PinLocations">[in_PinLocationsDT]</InArgument>
                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                <InArgument x:TypeArguments="ui:UiElement" x:Key="in_Board">[in_Board]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
            <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" x:Key="orange" DisplayName="Invoke OrangeOpen workflow" sap:VirtualizedContainerService.HintSize="342.4,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_15" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\GameOpening\OrangeOpen.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:Int32" x:Key="in_roundNumber">[in_roundNumber]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_flip">[flip]</InArgument>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_PinLocations">[in_PinLocationsDT]</InArgument>
                <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
                <InArgument x:TypeArguments="ui:UiElement" x:Key="in_Board">[in_Board]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
          </Switch>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="496.8,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Done with &quot; + in_RoundNumber.ToString + &quot; part of opening&quot;]" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Sequence>
      </If.Else>
    </If>
    <If Condition="[in_roundNumber &gt; 3]" DisplayName="If choosed piece" sap:VirtualizedContainerService.HintSize="573.6,2012" sap2010:WorkflowViewState.IdRef="If_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Sequence choose piece" sap:VirtualizedContainerService.HintSize="524.8,1823.2" sap2010:WorkflowViewState.IdRef="Sequence_5">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Int32" Name="pinX" />
            <Variable x:TypeArguments="x:Int32" Name="pinY" />
            <Variable x:TypeArguments="x:String" Name="piecePosition" />
            <Variable x:TypeArguments="x:Int32" Name="zoneX" />
            <Variable x:TypeArguments="x:Int32" Name="zoneY" />
            <Variable x:TypeArguments="sd:DataTable" Name="ColorTable" />
            <Variable x:TypeArguments="x:String" Name="strCorners" />
            <Variable x:TypeArguments="sd:DataRow" Name="BestRow" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If Condition="[in_RoundNumber &gt; 12 and not io_clickedPopup]" DisplayName="If in_RoundNumber &gt;12" sap:VirtualizedContainerService.HintSize="483.2,302.4" sap2010:WorkflowViewState.IdRef="If_9">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Check1Min workflow" sap:VirtualizedContainerService.HintSize="333.6,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_28" UnSafe="False" WorkflowFileName="Workflows\UICommon\Check1Min.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:Int32" x:Key="in_timeout">1</InArgument>
                  <InOutArgument x:TypeArguments="x:Boolean" x:Key="io_ClickedPopUp">[io_clickedPopup]</InOutArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </If.Then>
            <If.Else>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_33">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </Sequence>
            </If.Else>
          </If>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke TableReading_GetCellColors workflow" sap:VirtualizedContainerService.HintSize="483.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_16" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\TableReading\TableReading_GetCellColors.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="scg:Dictionary(x:Int32, scg:List(sd1:Rectangle))" x:Key="in_RectangleDictionary">[in_RectangleDictionary]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_CellSize">[CInt(in_Config("SSSelfSize"))]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_PlayerColor">[io_MyColor.ToLower]</InArgument>
              <InArgument x:TypeArguments="ui:UiElement" x:Key="in_Board">[in_Board]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_ColorsPath">[in_Config("ColorsPath").ToString]</InArgument>
              <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_ColorTable">[ColorTable]</OutArgument>
              <InArgument x:TypeArguments="sd:DataTable" x:Key="in_PlayTable">[in_PlayTable]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="483.2,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_13">
            <ui:CommentOut.Body>
              <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="416.8,506.4" sap2010:WorkflowViewState.IdRef="Sequence_29">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Sequence DisplayName="Get Corners" sap:VirtualizedContainerService.HintSize="375.2,413.6" sap2010:WorkflowViewState.IdRef="Sequence_24">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:InvokeCode ContinueOnError="{x:Null}" Code="out_CornersTable = in_ColorsTable.Copy&#xA;Dim CurrentCell As String&#xA;in_PlayerColor = in_PlayerColor.tolower.Trim&#xA;Dim i_m As Int32 = 0&#xA;Dim j_n As Int32 = 0&#xA;Dim ipm As Int32 = 0&#xA;Dim jpn As Int32 = 0&#xA;Dim FlagEnemyCorner As Boolean = False&#xA;Dim FlagPlayerCorner As Boolean = False&#xA;Dim EnemiesList As New list(Of String)&#xA;Dim PlayerList As New list(Of String)&#xA;Dim DummyTable As New system.data.datatable&#xA;Dim ResultList As New list(Of String)&#xA;&#xA;&#xA;EnemiesList = in_PlayersArray.ToList&#xA;PlayerList = {in_playerColor,&quot;10&quot;}.tolist&#xA;&#xA;console.writeline(&quot;PlayerList: &quot;+String.join(&quot;,&quot;c, PlayerList))&#xA;&#xA;EnemiesList.remove(in_playerColor)&#xA;EnemiesList.remove(&quot;10&quot;)&#xA;&#xA;console.writeline(&quot;EnemiesList: &quot;+String.join(&quot;,&quot;c, EnemiesList))&#xA;&#xA;For Each i As Int32 In enumerable.range(0, in_colorsTable.rows.count)&#xA;&#x9;For Each j As Int32 In enumerable.range(0, in_colorsTable.columns.count)&#xA;&#x9;&#x9;CurrentCell = in_ColorsTable(i)(j).toString.tolower.trim&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;If PlayerList.contains(CurrentCell) Then&#xA;&#x9;&#x9;&#x9;out_CornersTable(i)(j) = &quot;10&quot;&#xA;&#x9;&#x9;&#x9;Continue For&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;If EnemiesList.contains(CurrentCell) Then&#xA;&#x9;&#x9;&#x9;out_CornersTable(i)(j) = &quot;20&quot;&#xA;&#x9;&#x9;&#x9;Continue For&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;If CurrentCell.equals(&quot;0&quot;) Then&#xA;&#x9;&#x9;&#x9;Try&#xA;&#x9;&#x9;&#x9;For Each m As Int32 In {-1, 1}&#xA;&#x9;&#x9;&#x9;&#x9;For Each n As Int32 In {-1, 1}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;i_m = i - m&#xA;                        If i_m &lt; 0 Then&#xA;                            i_m = 0&#xA;                        End If&#xA;                        If i_m &gt; 19 Then&#xA;                            i_m = 19&#xA;                        End If&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;j_n = j - n&#xA;                        If j_n &lt; 0 Then&#xA;                           j_n = 0&#xA;                        End If                           &#xA;                        If j_n &gt; 19 Then&#xA;                            j_n = 19&#xA;                        End If&#xA;&#xA;                        ipm = i + m&#xA;                        If ipm &lt; 0 Then&#xA;                           ipm = 0&#xA;                        End If                           &#xA;                        If ipm &gt; 19 Then&#xA;                            ipm = 19&#xA;                        End If&#xA;&#xA;                        jpn = j+ n&#xA;                        If jpn &lt; 0 Then&#xA;                           jpn = 0&#xA;                        End If&#xA;                        If jpn &gt; 19 Then&#xA;                            jpn = 19&#xA;                        End If&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If PlayerList.contains(out_CornersTable(i_m)(j).toString) Or PlayerList.contains(out_CornersTable(i)(j_n).toString) Then&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;out_CornersTable(i)(j) = &quot;edge_player&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Throw New BusinessRuleException(&quot;edge_player&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If EnemiesList.contains(out_CornersTable(i_m)(j_n).toString) And &#xA;                        Not (EnemiesList.contains(out_CornersTable(i)(j_n).toString) Or &#xA;                        EnemiesList.contains(out_CornersTable(i_m)(j).toString) Or&#xA;                        EnemiesList.contains(out_CornersTable(ipm)(j).toString) Or &#xA;                        EnemiesList.contains(out_CornersTable(i)(jpn).toString)) Then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;out_CornersTable(i)(j) = &quot;corner_enemy&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FlagEnemyCorner = True&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If PlayerList.contains(out_CornersTable(i_m)(j_n).toString) Then&#xA;                            out_CornersTable(i)(j) = &quot;corner_player&quot;&#xA;                            FlagPlayerCorner = True&#xA;                        End If&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If (FlagEnemyCorner And FlagPlayerCorner) And&#xA;                        Not (EnemiesList.contains(out_CornersTable(i)(j_n).toString) Or &#xA;                        EnemiesList.contains(out_CornersTable(i_m)(j).toString) Or&#xA;                        EnemiesList.contains(out_CornersTable(ipm)(j).toString) Or &#xA;                        EnemiesList.contains(out_CornersTable(i)(jpn).toString)) Then&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;out_CornersTable(i)(j) = &quot;corner_common&quot;&#xA;                            FlagEnemyCorner = False&#xA;                            FlagPlayerCorner = False&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End If&#xA;&#xA;                        FlagEnemyCorner = False&#xA;                        FlagPlayerCorner = False&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;Catch ex As Exception&#xA;&#x9;&#x9;&#x9;console.writeline(ex.source+&quot; &quot;+ex.message)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;End Try&#xA;&#x9;&#x9;End If&#xA;&#x9;Next&#xA;&#x9;Next&#xA;&#xA;DummyTable = out_CornersTable.Copy&#xA;&#xA;For Each i As int32 In enumerable.range(0, DummyTable.rows.count)&#xA;    For Each j As int32 In enumerable.range(0, DummyTable.columns.count)&#xA;        Select DummyTable(i)(j).toString&#xA;            Case &quot;edge_player&quot;&#xA;                out_CornersTable(i)(j) = &quot;10&quot;&#xA;            Case &quot;corner_enemy&quot;&#xA;                out_CornersTable(i)(j) = &quot;40&quot;&#xA;            Case &quot;corner_player&quot;&#xA;                out_CornersTable(i)(j) = &quot;30&quot;&#xA;                ResultList.add(String.format(&quot;{0}_{1}&quot;,{CStr(i), CStr(j)}))&#xA;            Case &quot;corner_common&quot;&#xA;                out_CornersTable(i)(j) = &quot;100&quot;&#xA;        End Select&#xA;    Next&#xA;Next&#xA;&#xA;out_CornerCoordinates = String.join(&quot;,&quot;c, ResultList)" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="333.6,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
                    <ui:InvokeCode.Arguments>
                      <InArgument x:TypeArguments="sd:DataTable" x:Key="in_ColorsTable">[ColorTable]</InArgument>
                      <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_CornersTable">[ColorTable]</OutArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_playerColor">[io_MyColor]</InArgument>
                      <InArgument x:TypeArguments="s:String[]" x:Key="in_PlayersArray">[{"blue", "red", "green", "orange","10","20"}]</InArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="out_CornerCoordinates">[strCorners]</OutArgument>
                    </ui:InvokeCode.Arguments>
                  </ui:InvokeCode>
                  <ui:WriteRange AddHeaders="False" DataTable="[ColorTable]" DisplayName="Write Range" sap:VirtualizedContainerService.HintSize="333.6,116" sap2010:WorkflowViewState.IdRef="WriteRange_2" SheetName="Sheet1" StartingCell="A1" WorkbookPath="[in_Config(&quot;CornersPath&quot;).ToString]" />
                </Sequence>
              </Sequence>
            </ui:CommentOut.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:CommentOut>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke GetAvailableCornersNew workflow" sap:VirtualizedContainerService.HintSize="483.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_23" UnSafe="False" WorkflowFileName="Workflows\UICommon\GetAvailableCornersNew.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InOutArgument x:TypeArguments="sd:DataTable" x:Key="io_colorsDT">[ColorTable]</InOutArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_colorPlayer">[io_MyColor]</InArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="out_strCorners">[strCorners]</OutArgument>
              <OutArgument x:TypeArguments="x:Int32" x:Key="out_countBlueCorners" />
              <OutArgument x:TypeArguments="x:Int32" x:Key="out_countGreenCorners" />
              <OutArgument x:TypeArguments="x:Int32" x:Key="out_countRedCorners" />
              <OutArgument x:TypeArguments="x:Int32" x:Key="out_countOrangeCorners" />
              <InArgument x:TypeArguments="x:String" x:Key="in_CornersPath">[in_Config("CornersPath").ToString]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Takes available corners and left pieces and result lists of all possibilities" DisplayName="Invoke Python_GetValidPositions workflow" sap:VirtualizedContainerService.HintSize="483.2,157.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" LogEntry="No" LogExit="OnlySuccessfulReturn" UnSafe="False" WorkflowFileName="Workflows\Brain\Python_GetValidPositions.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_PythonPath">
                <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;PythonPath&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_PathToBlokeeScript">
                <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;PathToBlokeeScript&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_RemainingPiecesList">
                <mva:VisualBasicValue x:TypeArguments="scg:List(x:String)" ExpressionText="io_AvailablePieces" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_PiecesFilePath">
                <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;PiecesPath&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_CornerCoordinates">
                <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="strCorners" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_CornersFilePath">
                <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;CornersPath&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="sd:DataTable" x:Key="in_ConfigPiecesDT">
                <mva:VisualBasicValue x:TypeArguments="sd:DataTable" ExpressionText="in_PiecesDT" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_PythonScriptResultFolder">
                <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;ResultsPath&quot;).ToString" />
              </InArgument>
              <OutArgument x:TypeArguments="sd:DataRow" x:Key="out_BestRow">
                <mva:VisualBasicReference x:TypeArguments="sd:DataRow" ExpressionText="BestRow" />
              </OutArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_RoundNumber">
                <mva:VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="in_RoundNumber" />
              </InArgument>
              <InArgument x:TypeArguments="sd:DataTable" x:Key="in_GoToCornerTable">
                <mva:VisualBasicValue x:TypeArguments="sd:DataTable" ExpressionText="in_GoToCornerTable" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_PlayerColor">
                <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="io_MyColor" />
              </InArgument>
            </ui:InvokeWorkflowFile.Arguments>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke SelectPiece workflow" sap:VirtualizedContainerService.HintSize="483.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\UICommon\SelectPiece.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_pieceName">[Cstr(BestRow("piece"))]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ConfigurePiece workflow" sap:VirtualizedContainerService.HintSize="483.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\UICommon\ConfigurePiece.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_piecePosition">[Cstr(BestRow("rotation"))]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke CalculatePinPosition workflow" sap:VirtualizedContainerService.HintSize="483.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" LogEntry="OnlyInvocation" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\Brain\CalculatePinPosition.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_pieceName">[CStr(BestRow("piece"))]</InArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_piecePosition">[CStr(BestRow("rotation"))]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_X">[CInt(BestRow("y"))]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_Y">[CInt(BestRow("x"))]</InArgument>
              <OutArgument x:TypeArguments="x:Int32" x:Key="out_X">[pinX]</OutArgument>
              <OutArgument x:TypeArguments="x:Int32" x:Key="out_Y">[pinY]</OutArgument>
              <InArgument x:TypeArguments="sd:DataTable" x:Key="in_PinLocationDT">[in_PinLocationsDT]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ClickOnGivenPin workflow" sap:VirtualizedContainerService.HintSize="483.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_7" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\UICommon\ClickOnGivenPin.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="ui:UiElement" x:Key="in_Board">[in_Board]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_OffsetX">[pinX]</InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="in_OffsetY">[pinY]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke ConfirmPiece workflow" sap:VirtualizedContainerService.HintSize="483.2,113.6" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" LogEntry="No" LogExit="No" UnSafe="False" WorkflowFileName="Workflows\UICommon\ConfirmPiece.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <scg:Dictionary x:TypeArguments="x:String, Argument" />
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <RemoveFromCollection x:TypeArguments="x:String" Collection="[io_AvailablePieces]" DisplayName="Remove Piece From Collection" sap:VirtualizedContainerService.HintSize="483.2,22.4" sap2010:WorkflowViewState.IdRef="RemoveFromCollection`1_3" Item="[CStr(BestRow(&quot;piece&quot;))]" />
        </Sequence>
      </If.Then>
    </If>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="573.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info" Message="[&quot;Remaining pieces: &quot;+String.join(&quot;, &quot;,io_AvailablePieces)]" />
  </Sequence>
</Activity>